// Generated by CoffeeScript 1.8.0
(function() {
  module.exports = function(Server, Client, ReverseServer, ReverseClient) {
    var argv, host, optimist, port, server, _ref;
    optimist = require('optimist');
    argv = optimist.usage("\nRun websocket tunnel server or client.\n  To run server: wstunnel -s 8080\n  To run client: wstunnel -t localport:host:port ws://wshost:wsport\n  Or client via proxy: wstunnel -t localport:host:port -p http://[user:pass@]host:port ws://wshost:wsport\n\nNow connecting to localhost:localport is same as connecting to host:port on wshost\n\nIf websocket server is behind ssl proxy, then use \"wss://host:port\" in client mode\n\nFor security, you can \"lock\" the tunnel destination on server side, for eample:\n  wstunnel -s 8080 -t host:port\nServer will tunnel incomming websocket connection to host:port only, so client can just run\n  wstunnel -t localport ws://wshost:port\nIf client run:\n  wstunnel -t localpost:otherhost:otherport ws://wshost:port\n  * otherhost:otherport is ignored, tunnel destination is still \"host:port\" as specified on server.\n").string("s").string("t").string("r")["default"]("r", false).string("proxy").alias('t', "tunnel").boolean('c').boolean('http').alias('c', 'anycert')["default"]('c', false).describe('s', 'run as server, specify listen port').describe('tunnel', 'run as tunnel client, specify localport:host:port').describe("proxy", "connect via a http proxy server in client mode").describe("c", "accpet any certificates").argv;
    if (argv.r) {
      Server = ReverseServer;
      Client = ReverseClient;
    }
    if (argv.s) {
      if (argv.t) {
        _ref = argv.t.split(":"), host = _ref[0], port = _ref[1];
        server = new Server(host, port);
      } else {
        server = new Server();
      }
      return server.start(argv.s, (function(_this) {
        return function(err) {
          if (!err) {
            return console.log(" Server is listening on " + argv.s);
          }
        };
      })(this));
    } else if (argv.t) {
      return require("machine-uuid")(function(machineId) {
        var client, localport, wsHost, _ref1;
        require("../lib/httpSetup").config(argv.proxy, argv.c);
        client = new Client();
        if (argv.http) {
          client.setHttpOnly(true);
        }
        wsHost = argv._.slice(0)[0];
        _ref1 = argv.t.split(":"), localport = _ref1[0], host = _ref1[1], port = _ref1[2];
        client.verbose();
        if (host && port) {
          return client.start(localport, wsHost, "" + host + ":" + port, {
            'x-wstclient': machineId
          });
        } else {
          return client.start(localport, wsHost, void 0, {
            'x-wstclient': machineId
          });
        }
      });
    } else {
      return console.log(optimist.help());
    }
  };

}).call(this);

//# sourceMappingURL=wstunnel.js.map
