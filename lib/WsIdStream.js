// Generated by CoffeeScript 1.8.0
(function() {
  var WsIdStream, decoder, stream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require("stream");

  decoder = require("./buffer-decoder");

  module.exports = WsIdStream = (function(_super) {
    __extends(WsIdStream, _super);

    WsIdStream.prototype.onMessage = function(message) {
      var chunk, identifier, _ref;
      _ref = decoder.decode(message.binaryData), identifier = _ref.identifier, chunk = _ref.chunk;
      if (this.identifier === identifier && this._open) {
        return this.push(chunk);
      }
    };

    WsIdStream.prototype.onClose = function() {
      this._open = false;
      return this.emit('close');
    };

    WsIdStream.prototype.onError = function() {
      return this.emit('error', err);
    };

    function WsIdStream(ws, identifier) {
      this.ws = ws;
      this.identifier = identifier;
      this.onError = __bind(this.onError, this);
      this.onClose = __bind(this.onClose, this);
      this.onMessage = __bind(this.onMessage, this);
      WsIdStream.__super__.constructor.call(this);
      this._sig = "ws";
      this._open = true;
      this.ws.on('message', this.onMessage);
      this.ws.on('close', this.onClose);
      this.ws.on("error", this.onError);
    }

    WsIdStream.prototype.end = function() {
      WsIdStream.__super__.end.call(this);
      this.ws.removeListener('message', this.onMessage);
      this.ws.removeListener('close', this.onClose);
      return this.ws.removeListener('error', this.onError);
    };

    WsIdStream.prototype._read = function() {};

    WsIdStream.prototype._write = function(chunk, encoding, callback) {
      chunk = decoder.encode(chunk, this.identifier);
      if (this._open) {
        return this.ws.sendBytes(chunk, callback);
      }
    };

    return WsIdStream;

  })(stream.Duplex);

}).call(this);

//# sourceMappingURL=WsIdStream.js.map
